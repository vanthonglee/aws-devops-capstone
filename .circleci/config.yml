# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  docker: circleci/docker@2.1.2
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  aws-cli: circleci/aws-cli@3.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: thonglevan131/uda-aws-devops-capstone
    docker: # Each job requires specifying an executor
      # (either docker, macos, or machine), see
      - image: circleci/node:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

commands:
  install-dependencies:
    steps:
      - run:
          name: Installing necessary packages
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common
      - run:
          name: Installing aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-frontend:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd code/frontend
            npm install
            npm run build
      - save_cache:
          paths: [code/frontend/node_modules]
          key: frontend-build
  build-and-publish-image-docker:
    docker:
      - image: "cimg/base:stable"
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker build -t $IMAGE_NAME .
            docker push $IMAGE_NAME:latest
      - restore_cache:
          keys: [frontend-build]
  scan-dockerimage:
    docker:
      - image: "cimg/base:stable"
    steps:
      - checkout
      - setup_remote_docker
      - run: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Build image
          command: docker build -t $IMAGE_NAME .
      - run:
          name: Install trivy
          command: |
            # sudo apt-get install wget apt-transport-https gnupg lsb-release
            # wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            # echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
            # sudo apt-get update
            # sudo apt-get install trivy
      - run:
          name: Scan the local image with trivy
          # command: trivy image $IMAGE_NAME
          command: docker scan $IMAGE_NAME
  test-cluster:
    docker:
      - image: "cimg/python:3.10"
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - install-dependencies
      - run: |
          aws configure set aws_access_key_id ${AWS_CLI_ACCESS_KEY_ID} --profile ${AWS_CLI_PROFILE_NAME} 
          aws configure set aws_secret_access_key ${AWS_CLI_SECRET_ACCESS_KEY} --profile ${AWS_CLI_PROFILE_NAME}
      - kubernetes/install:
          kubectl-version: v1.22.0
      - run: >-
          aws eks update-kubeconfig --name capstone-georgelee-cluster --region us-east-1
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster
  deploy-to-eks:
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - install-dependencies
      - run:
          name: intall docker
          command: |
            sudo apt-get remove docker docker-engine docker.io
            sudo apt-get update
            sudo apt install docker.io
            sudo snap install docker
            docker --version
      - run: docker --version
      - run: sudo service docker start
      - run: sudo ls -la /var/run/docker.sock
      - run: curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
      - run: k3d cluster create mycluster
      - run: kubectl get nodes
      - run: echo ${AWS_CLI_ACCESS_KEY_ID}
      - run: |
          export 
          aws configure set aws_access_key_id ${AWS_CLI_ACCESS_KEY_ID}
      - run: |
          aws configure set aws_secret_access_key ${AWS_CLI_SECRET_ACCESS_KEY}
      - run: |
          aws configure set default.region us-east-1
      - run: |
          aws configure list
      - run: aws eks update-kubeconfig --name capstone-georgelee-cluster --region us-east-1
      - run: kubeclt get nodes -A

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  default:
    jobs:
      # - docker/hadolint:
      #     dockerfiles: Dockerfile
      #     executor-class: medium
      #     hadolint-tag: 2.2.0-debian
      #     ignore-rules: "DL4005,DL3008"
      #     trusted-registries: "docker.io"
      # - build-frontend
      # - build-and-publish-image-docker:
      #     requires: [docker/hadolint, build-frontend]
      # - scan-dockerimage:
      #     requires: [build-and-publish-image-docker]
      - deploy-to-eks
